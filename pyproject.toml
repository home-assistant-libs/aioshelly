[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
python_version = 3.11
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true

[tool.ruff]
target-version = "py311"

lint.select = ["ALL"]

lint.ignore = [
    "A005",     # Module `json` shadows a Python standard-library module
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "ASYNC109", # Async function definition with a `timeout` parameter
    "COM812",   # Trailing comma missing (conflicts with formatter)
    "D203",     # 1 blank line required before class docstring (conflicts with `no-blank-line-before-class` (D211))
    "D213",     # Multi-line docstring summary should start at the second line (conflicts with multi-line-summary-first-line` (D212))
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "FBT001",   # Boolean-typed positional argument in function definition
    "FBT002",   # Boolean default positional argument in function definition
    "FBT003",   # Boolean positional value in function call
    "G201",     # Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
    "ISC001",   # Single line implicit string concatenation
    "N818",     # Exception name should be named with an Error suffix
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "TC001",   # Move application import into a type-checking block
    "TC002",   # Move third-party import into a type-checking block
    "TC003",   # Move standard library import into a type-checking block
    "TID252",   # Prefer absolute imports over relative imports from parent modules
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY400",   # Use `logging.exception` instead of `logging.error`
]
[tool.ruff.lint.per-file-ignores]
"tools/*" = [
    "T201",      # `print` found
]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "PLR0913",
    "PLR2004",
    "S101",
    "SLF001",
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.tox]
legacy_tox_ini = """

[tox]
envlist = py311, py312, py313, lint, mypy, tests
skip_missing_interpreters = True

[gh-actions]
python =
  3.11: py311, lint, mypy
  3.12: py312, tests
  3.13: py313, tests

[testenv:lint]
basepython = python3
ignore_errors = True
commands =
  ruff format --check ./
  ruff check ./
  pydocstyle aioshelly
deps =
  -rrequirements.txt
  -rrequirements_lint.txt

[testenv:mypy]
basepython = python3
ignore_errors = True
commands =
  mypy aioshelly
deps =
  -rrequirements.txt
  -rrequirements_lint.txt

[testenv:tests]
basepython = python3
ignore_errors = True
commands =
  python -m pytest --cov=aioshelly --cov-report=xml --cov-report=term-missing
deps =
  -rrequirements.txt
  -rrequirements_dev.txt
"""
