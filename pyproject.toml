[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=77.0"]

[project]
name = "aioshelly"
version = "0.0.0"
license = "Apache-2.0"
description = "Asynchronous library to control Shelly devices."
readme = "README.md"
authors = [{ name = "Paulus Schoutsen", email = "paulus@home-assistant.io" }]
requires-python = ">=3.11"
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "aiohttp>=3.11.1",
  "bluetooth-data-tools>=1.28.0",
  "habluetooth>=3.42.0",
  "orjson>=3.8.1",
  "yarl",
]

[project.optional-dependencies]
lint = [
  "mypy==1.16.0",
  "pydocstyle==6.3.0",
  "ruff==0.11.13",
  "types-requests",
]
dev = [
  "aioresponses==0.7.8",
  "pre-commit==4.2.0",
  "pytest-asyncio==1.0.0",
  "pytest-cov==6.1.1",
  "pytest==8.4.0",
  "requests",
  "tox==4.26.0",
]

[project.urls]
"Source code" = "https://github.com/home-assistant-libs/aioshelly"

[tool.setuptools.packages.find]
include = ["aioshelly*"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
python_version = "3.11"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true

[tool.ruff]
target-version = "py311"

lint.select = ["ALL"]

lint.ignore = [
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "ASYNC109", # Async function definition with a `timeout` parameter
    "COM812",   # Trailing comma missing (conflicts with formatter)
    "D203",     # 1 blank line required before class docstring (conflicts with `no-blank-line-before-class` (D211))
    "D213",     # Multi-line docstring summary should start at the second line (conflicts with multi-line-summary-first-line` (D212))
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "FBT001",   # Boolean-typed positional argument in function definition
    "FBT002",   # Boolean default positional argument in function definition
    "FBT003",   # Boolean positional value in function call
    "G201",     # Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
    "N818",     # Exception name should be named with an Error suffix
    "PLR0912",  # Too many branches
    "TC001",   # Move application import into a type-checking block
    "TC002",   # Move third-party import into a type-checking block
    "TC003",   # Move standard library import into a type-checking block
    "TC006",    # Add quotes to type expression in typing.cast()
    "TID252",   # Prefer absolute imports over relative imports from parent modules
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY400",   # Use `logging.exception` instead of `logging.error`
]
[tool.ruff.lint.per-file-ignores]
"tools/*" = [
    "T201",      # `print` found
]
"tests/**/*" = [
    "D100",
    "PLR0913",
    "PLR2004",
    "S101",
    "SLF001",
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.tox]
legacy_tox_ini = """

[tox]
envlist = py311, py312, py313, lint, mypy, tests
skip_missing_interpreters = True

[gh-actions]
python =
  3.11: py311, lint, mypy
  3.12: py312, tests
  3.13: py313, tests

[testenv:lint]
basepython = python3
ignore_errors = True
commands =
  ruff format --check ./
  ruff check ./
  pydocstyle aioshelly
deps =
  .[lint]

[testenv:mypy]
basepython = python3
ignore_errors = True
commands =
  mypy aioshelly
deps =
  .[lint]

[testenv:tests]
basepython = python3
ignore_errors = True
commands =
  python -m pytest --cov=aioshelly --cov-report=xml --cov-report=term-missing
deps =
  .[dev]
"""
